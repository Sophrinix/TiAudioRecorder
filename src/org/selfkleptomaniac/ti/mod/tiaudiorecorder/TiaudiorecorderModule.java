/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package org.selfkleptomaniac.ti.mod.tiaudiorecorder;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.media.MediaRecorder;
import java.io.File;
import java.io.IOException;
import java.util.regex.*;

import android.os.Environment;


@Kroll.module(name="Tiaudiorecorder", id="org.selfkleptomaniac.ti.mod.tiaudiorecorder")
public class TiaudiorecorderModule extends KrollModule
{

  // Standard Debugging variables
  private static final String LCAT = "TiaudiorecorderModule";
  private static final boolean DBG = TiConfig.LOGD;
  
  private MediaRecorder recorder;
  public String path;
  public String loadState;

  // You can define constants with @Kroll.constant, for example:
  // @Kroll.constant public static final String EXTERNAL_NAME = value;
  
  public TiaudiorecorderModule()
  {
    super();
  }

  @Kroll.onAppCreate
  public static void onAppCreate(TiApplication app)
  {
    Log.d(LCAT, "inside onAppCreate");
    // put module init code that needs to run when the application is created
  }

  private void setRecorder(){
    this.recorder = new MediaRecorder();
  }

  private String sanitizePath(String filename) {
    Log.d(LCAT, "filename:" + filename);
    Pattern pattern = Pattern.compile("(file|content):/");
    Matcher matcher = pattern.matcher(filename);
    filename = matcher.replaceFirst("");
    if (!filename.startsWith("/")) {
      filename = "/" + filename;
    }
    if (!filename.endsWith(".3gp")) {
      filename += ".3gp";
    }
    Log.d(LCAT, "filename:" + filename);
    //this.path = "/data/data/"+ TiApplication.getInstance().getPackageName() +"/app_appdata/" + filename;
    //this.path = Environment.getExternalStorageDirectory() + "/" +  TiApplication.getInstance().getPackageName() + filename;
    return filename;
  }

  private void raiseError(String message){
    this.loadState = "error";
    KrollDict args = new KrollDict();
    args.put("status", "error");
    args.put("message", message);
    fireEvent("error", args);
  }
  
  @Kroll.method
  public String setPath(String path){
    this.path = sanitizePath(path);
    return this.path;
  }
  
  @Kroll.method
  public void prepare() throws IOException {

    setRecorder();

    String state = android.os.Environment.getExternalStorageState();
    if(!state.equals(android.os.Environment.MEDIA_MOUNTED))  {
        throw new IOException("Please check out your SD Card. The status is " + state + ".");
    }

    File directory = new File(path).getParentFile();
    if (!directory.exists() && !directory.mkdirs()) {
      throw new IOException("Failed to create file " + this.path);
    }

    this.recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
    this.recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
    this.recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
    this.recorder.setOutputFile(path);
    this.recorder.prepare();
    this.loadState = "initialized";
    KrollDict args = new KrollDict();
    args.put("status", "initialized");
    fireEvent("initialized", args);
  }

  @Kroll.method
  public void start(){
    if(this.loadState != "recording"){
      this.recorder.start();
      this.loadState = "recording";
      KrollDict args = new KrollDict();
      args.put("status", "recording");
      args.put("path", this.path);
      fireEvent("start", args);
    }else{
      Log.d(LCAT, "start() function is called, but loadState is " + this.loadState);
    }
  }

  @Kroll.method
  public void stop() throws IOException {
    if(this.loadState == "recording"){
      this.loadState = "complete";
      this.recorder.stop();
      this.recorder.release();
      KrollDict args = new KrollDict();
      args.put("status", "complete");
      args.put("path", this.path);
      fireEvent("complete", args);
    }else{
      Log.d(LCAT, "stop() function is called, but loadState is " + this.loadState);
    }
  }
  
  @Kroll.method
  public void pause(){
    if(this.loadState == "recording"){
      //recorder.stop();
      this.recorder.reset();
      //try{
      //  prepare();
      //}catch(IOException e){
      //  raiseError("IOException");
      //}
      this.loadState = "paused";
      KrollDict args = new KrollDict();
      args.put("status", "paused");
      args.put("path", this.path);
      fireEvent("paused", args);
    }else{
      Log.d(LCAT, "pause() function is called, but loadState is " + this.loadState);
    }
  }

  @Kroll.method
  public void reset(){
    if(this.loadState == "recording"){
      this.recorder.stop();
    }
    this.recorder.reset();
  }

  @Kroll.method
  public String getLoadState(){
    return this.loadState;
  }
}

